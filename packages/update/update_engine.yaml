######################################################################
# Update Package - Template - Sensor
######################################################################

#template:
#  - sensor:
#    # Pending Update
#    - name: pending_update
#      state: >
#        {{ states.update | default([]) | selectattr('state','eq','on') | list | count | int(0) }}

automation:

  ######################################################################
  # Update Notification: HACS
  ######################################################################
  - alias: "Update: HACS Notification"
    id: "update_hacs_notification"

    variables:
      pending_update_list: >
        {{ states.update
          | selectattr('state','eq','on')
          | selectattr('entity_id', 'in', states.group.hacs.attributes.entity_id)
          | map(attribute='entity_id')
          | list
        }}

    trigger:
      - platform: state
        entity_id: group.hacs
        to: 'on'
      - platform: homeassistant
        event: start

    condition:
      condition: state
      entity_id: group.hacs
      state: 'on'

    action:
      - delay: '00:00:10'
      - service: script.notify_text
        data_template:
          title: "HACS - Aggiornamento"
          message: >
            Sono disponibili {{pending_update_list | count }} aggiornamenti per i moduli HACS:
            {% for entity_id in pending_update_list %}
                -> {{ state_attr(entity_id, 'friendly_name')|replace(" - Aggiornamento", "") }}: {{ state_attr(entity_id, 'latest_version') }}
            {%- endfor -%}
          notification_id: "update"
          enable_persistent: true
      - service: input_boolean.turn_on
        entity_id: input_boolean.update_hacs

  ######################################################################
  # Update: Aknowledge update
  #
  # Actions:
  # - persistent_notification.dismiss
  ######################################################################
  - alias: "Update: Riconoscimento Aggiornamenti"
    id: "update_riconoscimento_aggiornamenti"

    trigger:
      platform: state
      entity_id:
        - input_boolean.update_hacs
        - input_boolean.update_shelly
        - input_boolean.update_bticino
      to: 'off'

    action:
      - service: persistent_notification.dismiss
        data_template:
          notification_id: "update"

######################################################################
# Update: Update HACS
# - update.install
######################################################################

#  - alias: "Update: Aggiorna HACS"
#    id: "update_aggiorna_hacs"
#
#    trigger:
#      - platform: state
#        entity_id: input_button.update_hacs
#
#    action:
#      repeat:
#        for_each: >
#          {{ states.update
#            | selectattr('state','eq','on')
#            | selectattr('entity_id', 'in', states.group.hacs.attributes.entity_id)
#            | map(attribute='entity_id')
#            | list
#          }}
#        sequence:
#          - service: update.install
#            target:
#              entity_id: "{{ repeat.item }}"

script:
  hacs_upgrade:
    alias: "HACS: Aggiornamento Collettivo"
    variables:
      pending_update_list: >
        {{ states.update
          | selectattr('state','eq','on')
          | selectattr('entity_id', 'in', states.group.hacs.attributes.entity_id)
          | map(attribute='entity_id')
          | list
        }}
    sequence:
      - service: update.install
        target:
          entity_id: '{{ pending_update_list }}'
